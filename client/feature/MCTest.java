/* Generated by Together */

package feature;

import com.om.onec.spi.*;
import com.om.onec.cci.ConnectionImpl;
import javax.resource.spi.*;
import javax.resource.NotSupportedException;
import javax.security.auth.Subject;
import java.io.PrintWriter;
import java.util.HashSet;
import junit.framework.*;

/** @author Andrej N. Chuchalov */
public class MCTest extends TestCase {
    protected Subject m_subject;
    protected DefaultConnectionManager m_defaultConnectionManager;

    public static Test suite() {
        return new TestSuite(MCTest.class);
    }

    public MCTest(String name) {
        super(name);
    }

    public void testing() {
        try {
            System.setProperty("UserName", "InternetUserName");
            System.setProperty("DBPath", "D:\\onecbase\\demodb\\demodb");
            System.setProperty("Password", "111");
            System.out.println("[ManagedConnectionImplTest2] -> Starting test...");
            ManagedConnectionImpl[] mc = new ManagedConnectionImpl[2];
            ConnectionImpl[] connection = new ConnectionImpl[2];
            ManagedConnectionFactoryImpl managedConnectionFactory = new ManagedConnectionFactoryImpl();
            assertNotNull("Unable to create ManagedConnectionFactory", managedConnectionFactory);
            System.out.println("[ManagedConnectionImplTest2] -> Creating mc #1...");
            mc[0] = new ManagedConnectionImpl(managedConnectionFactory, m_subject, null);
            assertNotNull("Unable to allocate connection", mc[0]);
            System.out.println("[ManagedConnectionImplTest2] -> Creating mc #2...");
            mc[1] = new ManagedConnectionImpl(managedConnectionFactory, m_subject, null);
            assertNotNull("Unable to allocate connection", mc[1]);
            Thread.sleep(100000);
            System.out.println("[ManagedConnectionImplTest2] -> getConnection of mc[0]...");
            connection[0] = (ConnectionImpl)mc[0].getConnection(m_subject, null);
            assertNotNull("Could not get a Connection of mc[0]", connection[0]);
            System.out.println("[ManagedConnectionImplTest2] -> getConnection of mc[1]...");
            connection[1] = (ConnectionImpl)mc[1].getConnection(m_subject, null);
            assertNotNull("Could not get a Connection of mc[1]", connection[1]);
            System.out.println("[ManagedConnectionImplTest2] -> associateConnection of mc[0]...");
            mc[0].associateConnection(connection[0]);
            System.out.println("[ManagedConnectionImplTest2] -> associateConnection of mc[1]...");
            mc[1].associateConnection(connection[1]);
            Thread.sleep(100000);
            System.out.println("[ManagedConnectionImplTest2] -> mc[0]: cleanup()");
            mc[0].cleanup();
            System.out.println("[ManagedConnectionImplTest2] -> mc[0]: destroy()");
            mc[0].destroy();
            System.out.println("[ManagedConnectionImplTest2] -> mc[1]: cleanup()");
            mc[1].cleanup();
            System.out.println("[ManagedConnectionImplTest2] -> mc[1]: destroy()");
            mc[1].destroy();
            Thread.sleep(10000);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("[ManagedConnectionImplTest2] -> Finished testing...");
    }

    public void setUp() {
        m_subject = new Subject();
        //        m_defaultConnectionManager = new DefaultConnectionManager();
    }

    public void main(String[] args) {
        testing();
    }
}
