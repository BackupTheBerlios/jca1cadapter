/* Generated by Together */

package feature;

import com.om.onec.spi.*;
import com.om.onec.cci.ConnectionFactoryImpl;
import javax.resource.spi.*;
import javax.resource.cci.ConnectionFactory;
import javax.resource.ResourceException;
import javax.resource.NotSupportedException;
import javax.security.auth.Subject;
import junit.framework.*;
import java.util.*;

/** @author Andrej N. Chuchalov */
public class ManagedConnectionFactoryImplTest extends TestCase {
    protected ConnectionManager m_connectionManager;
    protected Subject m_subject;
    protected Set m_connectionSet;

    public static Test suite() {
        return new TestSuite(ManagedConnectionFactoryImplTest.class);
    }

    public ManagedConnectionFactoryImplTest(String name) {
        super(name);
    }

    public void testing() {
        try {
            System.out.println("[ManagedConnectionFactoryImpl] starting test...");

/*            Object invalidObject = new Object();
            assertNotNull("Unable to assign test object", invalidObject);*/

            ManagedConnectionFactoryImpl managedConnectionFactory = new ManagedConnectionFactoryImpl();
            assertNotNull("Unable to create managed connection factory", managedConnectionFactory);
            ConnectionFactoryImpl connectionFactory =
                (ConnectionFactoryImpl)managedConnectionFactory.createConnectionFactory(m_connectionManager);
            assertNotNull("Unable to create connection factory", connectionFactory);

/*            connectionFactory =
                (ConnectionFactoryImpl)managedConnectionFactory.createConnectionFactory((ConnectionManager)invalidObject);
            assertNotNull("Unable to create connection factory",connectionFactory);
            connectionFactory =
                (ConnectionFactoryImpl)managedConnectionFactory.createConnectionFactory(null);
            assertNotNull("Unable to create connection factory",connectionFactory);*/

            ManagedConnectionImpl managedConnection =
                (ManagedConnectionImpl)managedConnectionFactory.createManagedConnection(m_subject, null);
            assertNotNull("Unable to create managed connection", managedConnection);

/*            managedConnection =
                (ManagedConnectionImpl)managedConnectionFactory.createManagedConnection((Subject)invalidObject, null);
            assertNotNull("Unable to create managed connection", managedConnection);
            managedConnection =
                (ManagedConnectionImpl)managedConnectionFactory.createManagedConnection(null, null);
            assertNotNull("Unable to create managed connection", managedConnection);*/

            Set connectionSet = new HashSet();
            connectionSet.add(managedConnection);
            ManagedConnectionImpl result = (ManagedConnectionImpl)managedConnectionFactory.matchManagedConnections(connectionSet,
                m_subject, null);
            assertNotNull("matchManagedConnections has null result", result);

/*            result =
                (ManagedConnectionImpl)managedConnectionFactory.matchManagedConnections((Set)invalidObject, (Subject)invalidObject, null);
            assertNotNull("matchManagedConnections has null result", result);
            result =
                (ManagedConnectionImpl)managedConnectionFactory.matchManagedConnections(null, null, null);
            assertNotNull("matchManagedConnections has null result", result);*/
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("[ManagedConnectionFactoryImpl] finished testing...");
    }

    public void setUp() {
        m_connectionManager = new DefaultConnectionManager();
        m_subject = new Subject();
    }

    public void main(String[] argv) {
        testing();
    }
}
