/* Generated by Together */

package com.om.onec.cci;

import javax.resource.cci.Record;
import java.util.*;
import javax.resource.ResourceException;

/**
 * Class implements code for custom record to use for transferring input and output parameters in ResultSet
 * @author Andrej N. Chuchalov
 * @version 1.00
 * @testcase com.om.onec.junit.unit.com.om.onec.adapter.cci.TestRecordImpl
 * @stereotype tested
 */
public class RecordImpl implements Record {
    private String m_recordName;
    private String m_description;
    private HashMap m_fields;

    public RecordImpl(String recordName) {
        this.m_recordName = recordName;
        m_fields = new HashMap();
    }

    public String getRecordName() {
        return this.m_recordName;
    }

    public void setRecordName(String par1) {
        this.m_recordName = par1;
    }

    public void setRecordShortDescription(String par1) {
        this.m_description = par1;
    }

    public String getRecordShortDescription() {
        return this.m_description;
    }

    public HashMap getFields() {
        return this.m_fields;
    }

    public void addValue(String columnName, Object value) {
        this.m_fields.put(columnName, value);
    }

    public Object getValue(String columnName) {
        return this.m_fields.get(columnName);
    }

    public void updateValue(String columnName, Object value) throws ResourceException {
        addValue(columnName, value);
    }

    public boolean equals(Object par1) {
        if (!(par1 instanceof RecordImpl)) {
            return false;
        }
        else if (this.m_recordName.equals(((RecordImpl)par1).getRecordName()) &&
            this.m_fields.equals(((RecordImpl)par1).getRecordName())) {
                return true;
        }
        return false;
    }

    public int hashCode() {
        return super.hashCode();
    }

    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    public int getCount() {
        return this.m_fields.size();
    }

    public void clear() {
		m_fields.clear();
    }

    public Iterator interator() {
        return m_fields.keySet().iterator();
    }
}
