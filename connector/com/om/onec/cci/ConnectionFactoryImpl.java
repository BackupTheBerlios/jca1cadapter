/* Generated by Together */

package com.om.onec.cci;

import com.om.onec.spi.*;
import javax.resource.cci.*;
import javax.resource.spi.*;
import javax.resource.*;
import javax.naming.Reference;
import java.io.*;
import java.lang.reflect.*;

/**
 * @author Sergey Yu. Terentjev
 * @version 1.1
 * @description This implementation class provides provides an inteface for getting connection to an EIS instance.
 * @difficulty medium
 * @type Product Requirement
 * @stereotype tested
 * @testcase com.om.onec.adapter.cci.Test.TestConnectionFactoryImpl
 */
public class ConnectionFactoryImpl implements ConnectionFactory, Serializable, Referenceable {
    private ManagedConnectionFactory managedConnectionFactory;
    private ConnectionManager connectionManager;
    public Reference ref;

    /**
     * @link
     * @shapeType PatternLink
     * @pattern TestCase
     * @clientRole tested
     * @supplierRole tests
     * @hidden
     */

    /*# private TestConnectionFactoryImpl _testConnectionFactoryImpl; */

    /** @supplierCardinality 0..1 */
    private ConnectionImpl lnkConnectionImpl;

    /**
     * @stereotype constructor
     * @input ManagedConnectionFactory
     */
    public ConnectionFactoryImpl(ConnectionManager cm, ManagedConnectionFactory mcf) {
        this.managedConnectionFactory = mcf;
        this.connectionManager = cm;
    }

    /**
     * @description Returns connection
     * @exception javax.resource.ResourceException
     * @return ConnectionImpl
     * @type Product Requirement
     */
    public Connection getConnection() throws ResourceException {
        return (ConnectionImpl)connectionManager.allocateConnection(managedConnectionFactory, null);
    }

    public Connection getConnection(ConnectionSpec connectionSpec) throws ResourceException {
        ConnectionRequestInfoMap InfoMap = new ConnectionRequestInfoMap();
        Class EMPTY_CLASS_ARRAY[] = new Class[0];
        try {
            Method method = connectionSpec.getClass().getMethod("getUserName", EMPTY_CLASS_ARRAY);
            String userName = (String)method.invoke(connectionSpec, null);
            method = connectionSpec.getClass().getMethod("getPassword", EMPTY_CLASS_ARRAY);
            String password = (String)method.invoke(connectionSpec, null);
            InfoMap.put("UserName", userName);
            InfoMap.put("Password", password);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return (ConnectionImpl)connectionManager.allocateConnection(managedConnectionFactory, InfoMap);
    }

    public RecordFactory getRecordFactory() {
        return new RecordFactoryImpl();
    }

    /**
     * @description Set the reference
     * @input javax.naming.Reference
     */
    public void setReference(Reference ref) {
        this.ref = ref;
    }

    /**
     * @description Set the reference
     * @return javax.naming.Reference
     */
    public Reference getReference() {
        return ref;
    }

    public ResourceAdapterMetaData getMetaData() throws NotSupportedException {
        throw new NotSupportedException("Not supported this time.");
    }
}
