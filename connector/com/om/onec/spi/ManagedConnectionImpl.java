/* Generated by Together */

package com.om.onec.spi;


import com.om.onec.cci.*;
import com.om.onec.AuthProperties;
import onec.IDispatchProxy;

import javax.resource.spi.*;
import javax.resource.cci.Connection;
import javax.resource.*;
import javax.security.auth.Subject;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;

import java.io.PrintWriter;
import java.util.*;

import com.linar.jintegra.*;

/**
 * A ManagedConnectionImpl instance represents a physical connection to an underlying EIS.
 * @author Andrej N Chuchalov
 */
public class ManagedConnectionImpl implements ManagedConnection {
    /**
    * ManagedConnectionFactory reference
    * */
    private ManagedConnectionFactoryImpl m_managedConnectionFactory;

    /**
    * Logger reference
    * */
    private PrintWriter m_logWriter;

    /**
    * Subject reference
    * */
    private Subject m_subject;

    /**
    * active connections list
    * */
    private Set m_connections;

    /**
    * ConnectionRequestInfo reference
    * */
    private ConnectionRequestInfo m_connectionRequestInfo;

    /**
    * Active phisical EIS instance reference
    * */
    private IDispatchProxy m_dispatchProxy;

    /**
    * Connection listener set
    * */
    private Vector m_connectionListeners;

    /**
     * The creation of a ManagedConnection instance results in the allocation of EIS and resource
     * adapter resources for each physical connection.
     * @stereotype constructor
     * @param ManagedConnectionFactoryImpl
     * @param Subject
     * @param ConnectionRequestInfo
     * @exception ResourceException
     */
    public ManagedConnectionImpl(ManagedConnectionFactoryImpl managedConnectionFactory, Subject subject,
        ConnectionRequestInfo connectionRequestInfo) throws ResourceException {
        try {
        	String OneCCLSID = "BF417C70-9A34-11D2-9F3D-008048DA120F"; //CLSID for V1CEnterprise.Application

            m_connections = new HashSet(); //Initialize connection set
            m_managedConnectionFactory = managedConnectionFactory; //applying managed connection factory reference
            m_logWriter = m_managedConnectionFactory.getLogWriter(); //applying logger
            m_subject = subject; //applying subject
            m_connectionRequestInfo = connectionRequestInfo; //applying connection request information

            //Obtaining IDispatch
            System.out.println("[ManagedConnectionImpl] -> setting up 1C object...");
	    AuthProperties ap = new AuthProperties();
            m_dispatchProxy = new IDispatchProxy(OneCCLSID, ap.getIP(), ap.getAuthInfo());
            System.out.println("[ManagedConnectionImpl] -> 1C object succesfully created...");

            //Setting up parameters
            Integer rmTrade = (Integer)m_dispatchProxy.getPropertyByName("RMTrade");
            String userName = managedConnectionFactory.getDbUser();
            String password = managedConnectionFactory.getDbPassword();
            String dbPath = managedConnectionFactory.getDbPath();
            String initString = String.valueOf(String.valueOf(
                new StringBuffer("/D").append(dbPath).append(" /N").append(userName).append(" /P").append(password)));
            System.out.println(initString);
            Variant v1 = new Variant("RMTrade", Variant.VT_INT, rmTrade.intValue());
	    System.out.println("RMTrade="+v1.toString());
            Variant v2 = new Variant("DBPath", Variant.VT_BSTR, initString);
            Variant v3 = new Variant("SPLASH", Variant.VT_BSTR, "SPLASH_SHOW");

            //Initialize 1C instance
            System.out.println("[ManagedConnectionImpl] -> 1C Initialization...\n");
            m_dispatchProxy.invokeMethodByName("Initialize", new Variant[] {v1, v2, v3});
            System.out.println("[ManagedConnectionImpl] -> 1C has been initialized...\n");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * The getConnection method creates a new application-level connection handle.
     * @param Subject
     * @param ConnectionRequestInfo
     * @return Object
     * @exception ResourceException
     */
    public Object getConnection(Subject subject, ConnectionRequestInfo cxRequestInfo) throws ResourceException {
        System.out.println("[ManagedConnectionImpl] -> getConnection()...");
        ConnectionImpl connection = new ConnectionImpl(this);
        addOneCConnection(connection);
        return connection;
    }

    /**
     * @param Object
     * @exception ResourceException
     */
    public void associateConnection(java.lang.Object connection) throws ResourceException {
        if (connection == null)
            throw new ResourceException("[ManagedConnection.associateConnection()]: Connot associate a null Connection");
        if (!(connection instanceof ConnectionImpl)) {
            throw new ResourceException(String.valueOf(String.valueOf(
                new StringBuffer("Connections of class ").append(connection.getClass()).append(" can not be assigned"))));
        }
        else {
            ConnectionImpl connectionImpl = (ConnectionImpl)connection;
            addOneCConnection(connectionImpl);
            return;
        }
    }

    /**
    * No transactions are supported
    * */
    public javax.transaction.xa.XAResource getXAResource() throws ResourceException {
        throw new ResourceException("Not supported");
    }

    public LocalTransaction getLocalTransaction() throws ResourceException {
        throw new ResourceException("Not supported");
    }
    
    public ConnectionRequestInfo getConnectionRequestInfo() {
	return this.m_connectionRequestInfo;
    }

    public void setLogWriter(java.io.PrintWriter out) throws ResourceException {
        m_logWriter = out;
    }

    public java.io.PrintWriter getLogWriter() throws ResourceException {
        return m_logWriter;
    }

    /**
     * This method serves to destroy a physical connection.
     * @exception ResourceException
     */
    public void destroy() throws ResourceException {
        System.out.println("[ManagedConnection] -> destroy()");

        //unassociating connections
        ConnectionImpl connectionImpl;
        for (Iterator it = m_connections.iterator(); it.hasNext(); connectionImpl.invalidate())
            connectionImpl = (ConnectionImpl)it.next();
        m_connections.clear();

        m_connectionListeners = null;
        m_subject = null;
        m_connectionRequestInfo = null;

        Cleaner.release(m_dispatchProxy); //destroy 1C instance
        m_dispatchProxy=null;
    }

    /**
     * The method ManagedConnectionImpl.cleanup initiates a cleanup of any client-specific state
     * maintained by a ManagedConnection instance.
     * @exception ResourceException
     */
    public void cleanup() throws ResourceException {
        if (m_logWriter != null)
            m_logWriter.println("[ManagedConnection] -> cleanup()");
    }

    /**
     * The method addConnectionEventListener allows a connection event listener to register with a ManagedConnection instance.
     */
    public void addConnectionEventListener(ConnectionEventListener listener) {
        System.out.println("[ManagedConnectionImpl] -> adding connection listener...");
        if (m_connectionListeners == null)
            m_connectionListeners = new Vector();
        if (!m_connectionListeners.contains(listener))
            m_connectionListeners.add(listener);
    }

    /**
     * The removeConnectionEventListener method removes a registered Connection-
     * EventListener instance from a ManagedConnection instance.
     */
    public void removeConnectionEventListener(ConnectionEventListener listener) {
        System.out.println("[ManagedConnectionImpl] -> removing connection listener...");
        if (m_connectionListeners != null) {
            m_connectionListeners.remove(listener);
            return;
        }
        else {
            return;
        }
    }

    /** The method getMetaData returns the metadata information for a ManagedConnection and the connected EIS instance. */
    public ManagedConnectionMetaData getMetaData() throws ResourceException {
        throw new ResourceException("Not supported");
    }

    public void removeConnection(Connection connection) throws ResourceException {
        System.out.println("[ManagedConnectionFactoryImpl] -> removing connection...");
        m_connections.remove(connection);
    }

    protected void addOneCConnection(ConnectionImpl connection) throws ResourceException {
        System.out.println("[ManagedConnectionImpl] -> adding object: " + connection.toString());
        m_connections.add(connection);
        System.out.println("[ManagedConnectionImpl] -> object succesfully added...");
    }

    public ManagedConnectionFactoryImpl getManagedConnectionFactory() throws ResourceException {
        return m_managedConnectionFactory;
    }

    public void fireConnectionClosed(Connection connection) {
        if (m_connectionListeners != null) {
            ConnectionEvent event = new ConnectionEvent(this, 1);
            event.setConnectionHandle(connection);
            for (int i = 0; i < m_connectionListeners.size(); i++)
                ((ConnectionEventListener)m_connectionListeners.elementAt(i)).connectionClosed(event);
        }
    }

    //returns active 1C instance reference
    public Object getClient() {
        return this.m_dispatchProxy;
    }
}
