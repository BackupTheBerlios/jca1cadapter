/* Generated by Together */

package com.om.onec.spi;

import com.om.onec.adapter.cci.ConnectionFactoryImpl;
import javax.resource.spi.*;
import javax.resource.cci.ConnectionFactory;
import javax.resource.ResourceException;
import javax.security.auth.Subject;
import java.io.Serializable;
import java.io.PrintWriter;
import java.util.*;

/**
 * A ManagedConnectionFactoryImpl instance is a factory of both ManagedConnection
 * and connection factory instances. This interface supports connection pooling
 * by defining methods for matching and creating connections.
 * @author Andrej N. Chuchalov
 */
public class ManagedConnectionFactoryImpl implements ManagedConnectionFactory, Serializable {
    private PrintWriter m_logWriter;
    private ConnectionManager m_connectionManager;
    private String m_userName;
    private String m_password;
    private String m_dbPath;

    /**
     * The method createConnectionFactory creates a connection factory instance.
     * @return Object
     * @exception ResourceException
     * @param ConnectionManager connectionManager
     */
    public Object createConnectionFactory(ConnectionManager connectionManager) throws ResourceException {
        System.out.println("[ManagedConnectionFactory] -> createConnectionFactory(ConnectionManager connectionManager)...");
        m_connectionManager = connectionManager;
        ConnectionFactory connectionFactory = new ConnectionFactoryImpl(m_connectionManager, this);
        return connectionFactory;
    }

    /**
     * The method createConnectionFactory creates a connection factory instance.
     * This case is used in a non-managed application scenario.
     * @return Object
     * @exception ResourceException
     */
    public Object createConnectionFactory() throws ResourceException {
        System.out.println("[ManagedConnectionFactory] -> createConnectionFactory()...");
        return createConnectionFactory(new DefaultConnectionManager());
    }

    /**
     * The method createManagedConnection creates a new physical connection to the underlying EIS instance.
     * @param Subject
     * @param ConnectionRequestInfo
     * @return ManagedConnection
     * @exception ResourceException
     */
    public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo cxRequestInfo)
        throws ResourceException {
            System.out.println("[ManagedConnectionFactory] -> createManagedConnection()...");
            if (cxRequestInfo != null) {
                ConnectionRequestInfoMap CS = (ConnectionRequestInfoMap)cxRequestInfo;
                System.out.println("[ManagedConnectionFactory] cxRequestInfo");
            }
            return new ManagedConnectionImpl(this, subject, cxRequestInfo);
    }

    /**
     * The method matchManagedConnections enables application server to use a resource adapterspecific criteria for matching a
     * ManagedConnection instance to service a connection request.
     * @param Set
     * @param Subject
     * @param ConnectionRequestInfo
     * @return ManagedConnection
     * @exception ResourceException
     */
    public ManagedConnection matchManagedConnections(Set connectionSet, Subject subject, ConnectionRequestInfo cxRequestInfo)
        throws ResourceException {
            System.out.println("[ManagedConnectionFactory] Search for matching connections in the set of "
                + connectionSet.size());
            for (Iterator it = connectionSet.iterator(); it.hasNext(); ) {
                Object o = it.next();
                if (o instanceof ManagedConnectionImpl) {
                    ManagedConnectionImpl managedConnection = (ManagedConnectionImpl)o;
                    ManagedConnectionFactory managedConnectionFactory = managedConnection.getManagedConnectionFactory();
                    //                if(managedConnectionFactory.equals(this) &&
                    // compareObjectsIncludingNull(managedConnection.getSubject(), subject) &&
                    // compareObjectsIncludingNull(managedConnection.getConnectionRequestInfo(), cxRequestInfo))
                    return managedConnection;
                }
            }
            return null;
    }

    /**
     * @param Object
     * @return boolean
     */
    public boolean equals(Object other) {
        return super.equals(other);
    }

    /** @return int */
    public int hashCode() {
        return super.hashCode();
    }

    public void setLogWriter(java.io.PrintWriter out) throws ResourceException {
        m_logWriter = out;
    }

    public java.io.PrintWriter getLogWriter() throws ResourceException {
        return m_logWriter;
    }

    public String getUserName() {
        return m_userName;
    }

    public void setUserName(String userName) {
        this.m_userName = userName;
    }

    public String getPassword() {
        return m_password;
    }

    public void setPassword(String value) {
        this.m_password = value;
    }

    public String getDbPath() {
        return m_dbPath;
    }

    public void setDbPath(String value) {
        this.m_dbPath = value;
    }
}
